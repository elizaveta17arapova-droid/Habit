// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
const currentUser = JSON.parse(localStorage.getItem('currentUser'));
if (!currentUser) {
    alert('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É');
    window.location.href = 'index.html';
}

// –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const userEmail = document.getElementById('user-email');
const currentDateEl = document.getElementById('current-date');
const habitInput = document.getElementById('habit-name');
const habitDateInput = document.getElementById('habit-date');
const addBtn = document.getElementById('add-btn');
const habitsList = document.getElementById('habits');
const logoutBtn = document.getElementById('logout-btn');
const calendarList = document.getElementById('calendar-list');
const completionEl = document.getElementById('completion');
const streakEl = document.getElementById('streak');

// –ü—Ä–æ—Ñ–∏–ª—å
const profileMenuBtn = document.getElementById('profile-menu-btn');
const profileMenu = document.getElementById('profile-menu');
const profileImg = document.getElementById('profile-img');
const menuAvatar = document.getElementById('menu-avatar');
const menuEmail = document.getElementById('menu-email');
const avatarInput = document.getElementById('avatar-input');
const changeAvatarBtn = document.getElementById('change-avatar-btn');

// –ü—Ä–æ—Ñ–∏–ª—å –∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
userEmail.textContent = currentUser.email;
menuEmail.textContent = currentUser.email;
const today = new Date();
const todayStr = today.toISOString().split('T')[0];
currentDateEl.textContent = today.toLocaleDateString();
habitDateInput.value = todayStr;

if(currentUser.avatar){
    profileImg.src = currentUser.avatar;
    menuAvatar.src = currentUser.avatar;
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let habits = JSON.parse(localStorage.getItem('habits_' + currentUser.email)) || [];

// –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è)
let selectedDate = todayStr;

renderHabits();
renderCalendar();

// ----------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ -----------------
addBtn.addEventListener('click', () => {
    const name = habitInput.value.trim();
    const date = habitDateInput.value;
    if (!name) return alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏');
    if (!date) return alert('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É');

    habits.push({ name, done: false, date });
    habitInput.value = '';
    habitDateInput.value = selectedDate;
    saveHabits();
    renderHabits();
    renderCalendar();
});

// ----------------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ -----------------
function saveHabits() {
    localStorage.setItem('habits_' + currentUser.email, JSON.stringify(habits));
}

// ----------------- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ -----------------
function renderHabits() {
    habitsList.innerHTML = '';
    const filtered = habits.filter(h => h.date === selectedDate);
    filtered.forEach((habit, index) => {
        const li = document.createElement('li');
        li.className = 'habit-item';
        li.innerHTML = `
            <span style="text-decoration:${habit.done ? 'line-through' : 'none'}">${habit.name}</span>
            <div class="buttons">
                <button onclick="toggleDone(${index})">${habit.done ? '–°–±—Ä–æ—Å–∏—Ç—å' : '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'}</button>
                <button onclick="editHabit(${index})">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button onclick="deleteHabit(${index})">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;
        habitsList.appendChild(li);
    });
    updateStats();
}

// ----------------- –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è -----------------
function toggleDone(index) {
    const filtered = habits.filter(h => h.date === selectedDate);
    const habitIndex = habits.indexOf(filtered[index]);
    if (habitIndex === -1) return;
    habits[habitIndex].done = !habits[habitIndex].done;
    saveHabits();
    renderHabits();
}

// ----------------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ -----------------
function editHabit(index) {
    const filtered = habits.filter(h => h.date === selectedDate);
    const habit = filtered[index];
    if (!habit) return alert('–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:', habit.name);
    if (!newName || newName.trim() === '') return;

    const newDate = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (YYYY-MM-DD):', habit.date);
    if (!newDate) return;

    const habitIndex = habits.indexOf(habit);
    if (habitIndex === -1) return alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');

    habits[habitIndex].name = newName.trim();
    habits[habitIndex].date = newDate;
    saveHabits();
    renderHabits();
    renderCalendar();
}

// ----------------- –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ -----------------
function deleteHabit(index) {
    const filtered = habits.filter(h => h.date === selectedDate);
    const habitIndex = habits.indexOf(filtered[index]);
    if (habitIndex === -1) return;
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É?')) {
        habits.splice(habitIndex, 1);
        saveHabits();
        renderHabits();
        renderCalendar();
    }
}

// ----------------- –ö–∞–ª–µ–Ω–¥–∞—Ä—å -----------------
function renderCalendar() {
    calendarList.innerHTML = '';
    const monthDays = new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate();

    for (let i = 1; i <= monthDays; i++) {
        const dateStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
        const li = document.createElement('li');
        li.textContent = i;

        const dayHabits = habits.filter(h => h.date === dateStr);
        const total = dayHabits.length;
        const done = dayHabits.filter(h => h.done).length;
        const percent = total === 0 ? 0 : Math.round((done / total) * 100);

        // üé® –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if (total > 0) {
            if (percent === 0) {
                li.style.backgroundColor = '#ffb3b3'; // –∫—Ä–∞—Å–Ω—ã–π (–Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)
            } else if (percent < 70) {
                li.style.backgroundColor = '#fff3b3'; // –∂–µ–ª—Ç—ã–π (—á–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)
            } else {
                li.style.backgroundColor = '#a0e7a0'; // –∑–µ–ª–µ–Ω—ã–π (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ >70%)
            }
        } else {
            li.style.backgroundColor = '#e3ecff'; // –±–∞–∑–æ–≤—ã–π —Ñ–æ–Ω ‚Äî –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫
        }

        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        if (dateStr === selectedDate) {
            li.style.border = '2px solid #333';
        }

        li.addEventListener('click', () => {
            selectedDate = dateStr;
            habitDateInput.value = dateStr;
            renderHabits();
            renderCalendar();
            renderArchive();
        });

        calendarList.appendChild(li);
    }
}

// ----------------- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -----------------
function updateStats() {
    const filtered = habits.filter(h => h.date === selectedDate);
    const total = filtered.length;
    const done = filtered.filter(h => h.done).length;
    const percent = total === 0 ? 0 : Math.round((done / total) * 100);
    completionEl.textContent = percent + '%';

    let streakCount = 0;
    let checkDate = new Date(selectedDate);
    while (true) {
        const dateStr = checkDate.toISOString().split('T')[0];
        const dayHabits = habits.filter(h => h.date === dateStr);
        if (dayHabits.length === 0) break;
        const allDone = dayHabits.every(h => h.done);
        if (!allDone) break;
        streakCount++;
        checkDate.setDate(checkDate.getDate() - 1);
    }
    streakEl.textContent = streakCount;
}
// ----------------- –ê—Ä—Ö–∏–≤ –ø—Ä–∏–≤—ã—á–µ–∫ -----------------
const archiveList = document.getElementById('archived-habits');
const archiveFilters = document.querySelectorAll('.archive-filter');
let archiveFilter = 'all'; // —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
function renderArchive() {
    archiveList.innerHTML = '';

    let filteredHabits = habits;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (archiveFilter === 'done') {
        filteredHabits = habits.filter(h => h.done);
    } else if (archiveFilter === 'active') {
        filteredHabits = habits.filter(h => !h.done);
    }

    if (filteredHabits.length === 0) {
        const li = document.createElement('li');
        li.textContent = '–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è';
        li.style.color = '#888';
        archiveList.appendChild(li);
        return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    const grouped = {};
    filteredHabits.forEach(h => {
        if (!grouped[h.date]) grouped[h.date] = [];
        grouped[h.date].push(h);
    });

    // –í—ã–≤–æ–¥–∏–º –ø–æ –¥–∞—Ç–∞–º
    Object.keys(grouped).sort().forEach(date => {
        const dateHeader = document.createElement('h4');
        dateHeader.textContent = new Date(date).toLocaleDateString('ru-RU');
        dateHeader.style.marginTop = '10px';
        dateHeader.style.color = '#4a90e2';
        archiveList.appendChild(dateHeader);

        grouped[date].forEach(habit => {
            const li = document.createElement('li');
            li.textContent = habit.name + (habit.done ? ' ‚úÖ' : ' ‚ùå');
            li.style.background = habit.done ? '#d9f7d9' : '#f9d9d9';
            li.style.borderRadius = '6px';
            li.style.marginBottom = '4px';
            li.style.padding = '6px 10px';
            archiveList.appendChild(li);
        });
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∞—Ä—Ö–∏–≤–∞
archiveFilters.forEach(btn => {
    btn.addEventListener('click', () => {
        archiveFilters.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        archiveFilter = btn.dataset.filter;
        renderArchive();
    });
});

// ----------------- –ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è -----------------
profileMenuBtn.addEventListener('click', () => {
  profileMenu.style.display = profileMenu.style.display === 'none' ? 'block' : 'none';
});

changeAvatarBtn.addEventListener('click', () => avatarInput.click());
// –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä
if(currentUser.avatar){
    profileImg.src = currentUser.avatar;
    menuAvatar.src = currentUser.avatar;
} else {
    // –µ—Å–ª–∏ avatar –Ω–µ—Ç –≤ currentUser, –±–µ—Ä—ë–º –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ "avatar"
    const savedAvatar = localStorage.getItem("avatar");
    if(savedAvatar){
        profileImg.src = savedAvatar;
        menuAvatar.src = savedAvatar;
        // –æ–±–Ω–æ–≤–ª—è–µ–º currentUser, —á—Ç–æ–±—ã –Ω–∞ –±—É–¥—É—â–µ–µ –Ω–µ –±—ã–ª–æ –ø—É—Å—Ç–æ
        currentUser.avatar = savedAvatar;
        localStorage.setItem('currentUser', JSON.stringify(currentUser));
    }
}

// ----------------- –í—ã—Ö–æ–¥ -----------------
logoutBtn.addEventListener('click', () => {
  localStorage.removeItem('currentUser');
  window.location.href = 'index.html';
});
